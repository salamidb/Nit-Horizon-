//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Knith_Horizon.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class knithEntities1 : DbContext
    {
        public knithEntities1()
            : base("name=knithEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Advance_Mast> Advance_Mast { get; set; }
        public virtual DbSet<ADVance_Trans> ADVance_Trans { get; set; }
        public virtual DbSet<ATTENDANCE> ATTENDANCEs { get; set; }
        public virtual DbSet<AttendIntegrity> AttendIntegrities { get; set; }
        public virtual DbSet<AttendSummary> AttendSummaries { get; set; }
        public virtual DbSet<Auth_Master> Auth_Master { get; set; }
        public virtual DbSet<BiAnnualReport> BiAnnualReports { get; set; }
        public virtual DbSet<Bonu> Bonus { get; set; }
        public virtual DbSet<BonusLtStmt> BonusLtStmts { get; set; }
        public virtual DbSet<Coff_Requests> Coff_Requests { get; set; }
        public virtual DbSet<Coffs_Trans> Coffs_Trans { get; set; }
        public virtual DbSet<CoffTemp> CoffTemps { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<DailyAttend> DailyAttends { get; set; }
        public virtual DbSet<DaysCount> DaysCounts { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<emp_multi_shift> emp_multi_shift { get; set; }
        public virtual DbSet<EmpAttandance> EmpAttandances { get; set; }
        public virtual DbSet<ESIContribution> ESIContributions { get; set; }
        public virtual DbSet<EsiHalfYrCntrbn> EsiHalfYrCntrbns { get; set; }
        public virtual DbSet<EVERYDAY> EVERYDAYs { get; set; }
        public virtual DbSet<ExcessEL> ExcessELs { get; set; }
        public virtual DbSet<Form10> Form10 { get; set; }
        public virtual DbSet<Form2> Form2 { get; set; }
        public virtual DbSet<Form5> Form5 { get; set; }
        public virtual DbSet<FormAR> FormARs { get; set; }
        public virtual DbSet<FormF> FormFs { get; set; }
        public virtual DbSet<FORMR12> FORMR12 { get; set; }
        public virtual DbSet<Grat_Payments> Grat_Payments { get; set; }
        public virtual DbSet<IncentivesStmt> IncentivesStmts { get; set; }
        public virtual DbSet<Increment> Increments { get; set; }
        public virtual DbSet<LEV_MAST> LEV_MAST { get; set; }
        public virtual DbSet<LEV_TRANS> LEV_TRANS { get; set; }
        public virtual DbSet<LicStatu> LicStatus { get; set; }
        public virtual DbSet<PAYREG> PAYREGs { get; set; }
        public virtual DbSet<PAYREGC> PAYREGCs { get; set; }
        public virtual DbSet<PERMISSION> PERMISSIONs { get; set; }
        public virtual DbSet<PERMISSION1> PERMISSIONS1 { get; set; }
        public virtual DbSet<PFContribution> PFContributions { get; set; }
        public virtual DbSet<PFSummary> PFSummaries { get; set; }
        public virtual DbSet<ProvidentFund> ProvidentFunds { get; set; }
        public virtual DbSet<PTaxReturn> PTaxReturns { get; set; }
        public virtual DbSet<Qualification> Qualifications { get; set; }
        public virtual DbSet<QuarterReport> QuarterReports { get; set; }
        public virtual DbSet<RANx> RANGES { get; set; }
        public virtual DbSet<Reminder> Reminders { get; set; }
        public virtual DbSet<ReminderStatu> ReminderStatus { get; set; }
        public virtual DbSet<RepAttend> RepAttends { get; set; }
        public virtual DbSet<RepAttendance> RepAttendances { get; set; }
        public virtual DbSet<RepCoff> RepCoffs { get; set; }
        public virtual DbSet<RepGrat> RepGrats { get; set; }
        public virtual DbSet<RepSecurity> RepSecurities { get; set; }
        public virtual DbSet<SecPunch> SecPunches { get; set; }
        public virtual DbSet<SHIFT_MASTER> SHIFT_MASTER { get; set; }
        public virtual DbSet<tblbuyer> tblbuyers { get; set; }
        public virtual DbSet<tblpaycode> tblpaycodes { get; set; }
        public virtual DbSet<TempAttend> TempAttends { get; set; }
        public virtual DbSet<TempDailyAttend> TempDailyAttends { get; set; }
        public virtual DbSet<TempEsiHalfYr> TempEsiHalfYrs { get; set; }
        public virtual DbSet<user> users { get; set; }
        public virtual DbSet<UType_Master> UType_Master { get; set; }
        public virtual DbSet<attnupdate_log> attnupdate_log { get; set; }
        public virtual DbSet<COFFREQMAY> COFFREQMAYs { get; set; }
        public virtual DbSet<EMP> EMPs { get; set; }
        public virtual DbSet<empyrsalreport> empyrsalreports { get; set; }
        public virtual DbSet<EsiHalfYrTemp> EsiHalfYrTemps { get; set; }
        public virtual DbSet<FORMR1> FORMR1 { get; set; }
        public virtual DbSet<FORMR11> FORMR11 { get; set; }
        public virtual DbSet<FURTIVE> FURTIVEs { get; set; }
        public virtual DbSet<LEV_MAST1> LEV_MAST1 { get; set; }
        public virtual DbSet<Payreg1> Payreg1 { get; set; }
        public virtual DbSet<PfYearContribution> PfYearContributions { get; set; }
        public virtual DbSet<RPTATTEND> RPTATTENDs { get; set; }
        public virtual DbSet<RPTESI> RPTESIs { get; set; }
        public virtual DbSet<RPTOT> RPTOTs { get; set; }
        public virtual DbSet<RULE> RULES { get; set; }
        public virtual DbSet<rupayan> rupayans { get; set; }
        public virtual DbSet<SHIFTB> SHIFTBs { get; set; }
        public virtual DbSet<tbl_sl> tbl_sl { get; set; }
        public virtual DbSet<tbl_style> tbl_style { get; set; }
        public virtual DbSet<tblBonusRange> tblBonusRanges { get; set; }
        public virtual DbSet<tblextrapaycode> tblextrapaycodes { get; set; }
        public virtual DbSet<tblStylePart> tblStyleParts { get; set; }
        public virtual DbSet<tblStyleRate> tblStyleRates { get; set; }
        public virtual DbSet<temppayreg> temppayregs { get; set; }
        public virtual DbSet<tempyrsal> tempyrsals { get; set; }
        public virtual DbSet<view_attendance> view_attendance { get; set; }
        public virtual DbSet<view_day_sl> view_day_sl { get; set; }
        public virtual DbSet<view_emp_date> view_emp_date { get; set; }
        public virtual DbSet<view_emp_dept> view_emp_dept { get; set; }
        public virtual DbSet<view_emp_leave_taken> view_emp_leave_taken { get; set; }
        public virtual DbSet<view_everyday> view_everyday { get; set; }
        public virtual DbSet<View_production_report> View_production_report { get; set; }
        public virtual DbSet<View_section> View_section { get; set; }
        public virtual DbSet<view_union_attn> view_union_attn { get; set; }
        public virtual DbSet<viewcardprint> viewcardprints { get; set; }
        public virtual DbSet<VW_Deptwise_Emp> VW_Deptwise_Emp { get; set; }
        public virtual DbSet<VW_INCR> VW_INCR { get; set; }
    
        public virtual int DownLoadPunches(string filename)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DownLoadPunches", filenameParameter);
        }
    
        public virtual int get_attendance_from_machine(Nullable<System.DateTime> adate)
        {
            var adateParameter = adate.HasValue ?
                new ObjectParameter("adate", adate) :
                new ObjectParameter("adate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("get_attendance_from_machine", adateParameter);
        }
    
        public virtual int sp_Gross_salary_update(Nullable<decimal> gross, Nullable<decimal> medical, Nullable<decimal> other, string etype)
        {
            var grossParameter = gross.HasValue ?
                new ObjectParameter("gross", gross) :
                new ObjectParameter("gross", typeof(decimal));
    
            var medicalParameter = medical.HasValue ?
                new ObjectParameter("medical", medical) :
                new ObjectParameter("medical", typeof(decimal));
    
            var otherParameter = other.HasValue ?
                new ObjectParameter("other", other) :
                new ObjectParameter("other", typeof(decimal));
    
            var etypeParameter = etype != null ?
                new ObjectParameter("etype", etype) :
                new ObjectParameter("etype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Gross_salary_update", grossParameter, medicalParameter, otherParameter, etypeParameter);
        }
    
        public virtual int sp_insert_attendance(Nullable<int> eno, Nullable<System.DateTime> wdate, string shift, Nullable<System.DateTime> timein, Nullable<System.DateTime> timeout, Nullable<System.DateTime> timeoutdate, string timeworked, string compcode, string userid)
        {
            var enoParameter = eno.HasValue ?
                new ObjectParameter("eno", eno) :
                new ObjectParameter("eno", typeof(int));
    
            var wdateParameter = wdate.HasValue ?
                new ObjectParameter("wdate", wdate) :
                new ObjectParameter("wdate", typeof(System.DateTime));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("shift", shift) :
                new ObjectParameter("shift", typeof(string));
    
            var timeinParameter = timein.HasValue ?
                new ObjectParameter("timein", timein) :
                new ObjectParameter("timein", typeof(System.DateTime));
    
            var timeoutParameter = timeout.HasValue ?
                new ObjectParameter("timeout", timeout) :
                new ObjectParameter("timeout", typeof(System.DateTime));
    
            var timeoutdateParameter = timeoutdate.HasValue ?
                new ObjectParameter("timeoutdate", timeoutdate) :
                new ObjectParameter("timeoutdate", typeof(System.DateTime));
    
            var timeworkedParameter = timeworked != null ?
                new ObjectParameter("timeworked", timeworked) :
                new ObjectParameter("timeworked", typeof(string));
    
            var compcodeParameter = compcode != null ?
                new ObjectParameter("compcode", compcode) :
                new ObjectParameter("compcode", typeof(string));
    
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_attendance", enoParameter, wdateParameter, shiftParameter, timeinParameter, timeoutParameter, timeoutdateParameter, timeworkedParameter, compcodeParameter, useridParameter);
        }
    
        public virtual int sp_InsetEmployeeIntoMDB()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsetEmployeeIntoMDB");
        }
    
        public virtual int sp_production_rate_update()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_production_rate_update");
        }
    
        public virtual int update_worktime_new(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> shiftin, Nullable<System.DateTime> shiftout, string shift, Nullable<int> shifthr)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var shiftinParameter = shiftin.HasValue ?
                new ObjectParameter("shiftin", shiftin) :
                new ObjectParameter("shiftin", typeof(System.DateTime));
    
            var shiftoutParameter = shiftout.HasValue ?
                new ObjectParameter("shiftout", shiftout) :
                new ObjectParameter("shiftout", typeof(System.DateTime));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("shift", shift) :
                new ObjectParameter("shift", typeof(string));
    
            var shifthrParameter = shifthr.HasValue ?
                new ObjectParameter("shifthr", shifthr) :
                new ObjectParameter("shifthr", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_worktime_new", datefromParameter, shiftinParameter, shiftoutParameter, shiftParameter, shifthrParameter);
        }
    }
}
